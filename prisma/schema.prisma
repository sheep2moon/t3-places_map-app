// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
    id String @id @default(cuid())
    message String
    createdAt DateTime @default(now())
    userId String 
    user User @relation(fields: [userId],references: [id])

}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    reviews       Review[]
    places        Place[]      @relation("AddedBy") 
    UserLibrary   UserLibrary?
    notifications Notification[]
}

model UserLibrary {
    id       String  @id @default(cuid())
    user     User    @relation(fields: [userId], references: [id])
    wishlist Place[] @relation("Wishlist")
    visited  Place[] @relation("Visited")
    userId   String  @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Image {
    id       String  @id @default(cuid())
    url      String?
    Review   Review? @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId String?
    Place    Place?  @relation(fields: [placeId], references: [id], onDelete: Cascade)
    placeId  String?
}

model PlaceType {
    id    String  @id @default(cuid())
    title String
    icon  String
    Place Place[]
}

model Review {
    id        String   @id @default(cuid())
    createdBy String
    user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
    comment   String   @db.Text
    rate      Int
    images    Image[]
    createdAt DateTime @default(now())
    Place     Place?   @relation(fields: [placeId], references: [id], onDelete: Cascade)
    placeId   String
}

model Place {
    id           String        @id @default(cuid())
    displayName  String
    createdAt    DateTime      @default(now())
    addedBy      User          @relation("AddedBy", fields: [addedById], references: [id], onDelete: Cascade)
    wishlistedBy UserLibrary[] @relation("Wishlist")
    visitedBy    UserLibrary[] @relation("Visited")
    isPaid       Boolean
    prices       String
    lat          Float
    lng          Float
    description  String        @db.Text
    reviews      Review[]
    images       Image[]
    placeTypeId  String
    type         PlaceType     @relation(fields: [placeTypeId], references: [id], onDelete: Cascade)
    addedById    String
}
